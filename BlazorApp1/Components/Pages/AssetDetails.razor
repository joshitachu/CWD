@page "/assetDetails/"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AssetService AssetService
@inject SimulationDataService SimulationDataService

<script>
    window.downloadFile = function (contentType, fileName, content) {
        var a = document.createElement("a");
        var file = new Blob([content], { type: contentType });
        a.href = URL.createObjectURL(file);
        a.download = fileName;
        a.click();
    };
</script>

@if (AssetService.SelectedAsset != null)
{
    <div id="chart-container" style="width: 100%; height: 100%;">
        <h2 style="margin-top: 0">@asset.name Details</h2>
    </div>

    @if (EditState)
    {
        <button class="top-right-button" @onclick="RunUpdated">Run with New Values</button>
    }

    <br>
    <h3>Properties:</h3>
    <table>
        <tr>
            <th>Property Name</th>
            <th>Property Value</th>
            <th>Property Editable</th>
            <th>Edit</th>
        </tr>
        @foreach (var property in asset.properties)
        {
            <tr>
                <td>@property.name</td>
                <td>@property.value</td>
                <td>@property.editable</td>
                <td>
                    @if (property.editable)
                    {
                        <button @onclick="() => OpenPopup(property)">Edit</button>
                    }
                </td>
            </tr>
        }
    </table>

    @if (showPopup)
    {
        <div class="popup-container">
            <div class="popup">
                <b><p>*Om data te wijzigen moet de simulatie eerst beÃ«indigd worden*</p></b>
                <label for="propertyValue">@editedProperty.name:</label>
                <input type="text" id="propertyValue" @bind="PropertyValue">
                <br><br>
                <button @onclick="SaveChanges">Save Changes</button>
                <button @onclick="ClosePopup">Cancel</button>
            </div>
        </div>
    }

    <h3>Inputs/Outputs:</h3>
    <table>
        <tr>
            <th>Name</th>
            <th>Class</th>
            <th>Description</th>
        </tr>
        @foreach (var output in asset.outputs)
        {
            <tr>
                <td>@output.name</td>
                <td>@output._clazz</td>
                <td>@output.desc</td>
            </tr>
        }
    </table>

    <button @onclick="GetData">Run Simulation</button>

    @if (Istrue)
    {
        @if (SimulationDataService.IsLoading)
        {
            <div class="loading-spinner-container">
                <div class="loading-spinner">
                    <div class="spinner"></div>
                </div>
            </div>
        }
        else if (bigData != null)
        {
            <button @onclick="endSim">End simulation</button>
            @foreach (var chartData in chartDataList)
            {
                <PlotlyChart @ref="chart" @bind-Config="chartData.Config" @bind-Layout="chartData.Layout" @bind-Data="chartData.Data" />
            
            }
            <button @onclick="DownloadCSV">Download data as CSV</button>
            
            
        }
    }
}
else
{
    DataNotFound();
    <p>@noData</p>
}

@code {
    public string simText = "Run Simulation";
    List<Propertyy> editedProperties = new List<Propertyy>();

    public string PropertyValue;
    HttpClient httpClient = new HttpClient();
    public string DecodedHtml { get; private set; }

    public bool showPopup;
    public Propertyy editedProperty;
    string editedPropertyName;
    object editedPropertyValue;
    private string changedValue;
    private bool EditState;
    public string unit;
     private List<AssetStateHistory> bigData;
    public string noData;
    public string StartTime;
    public string endTime;
    public Roott asset;
    public Boolean Istrue = true;
    public double list;
    private PlotlyChart? chart;

    private List<ChartData> chartDataList = new List<ChartData>();

    protected override async Task OnInitializedAsync()
    {
        asset = AssetService.SelectedAsset;
    }

    public void goBack()
    {
        NavigationManager.NavigateTo("/Assets");
    }

    private Dictionary<string, string> assetImagePaths = new Dictionary<string, string>
    {
        { "EmmaPlc", "imgs/EmmaPlc.jpg" },
        { "AssetType2", "imgs/EmmaPlc" },
    };

    private string GetAssetImagePath(string assetType)
    {
        if (assetType != null && assetImagePaths.ContainsKey(assetType))
        {
            return assetImagePaths[assetType];
        }
        else
        {
            return "imgs/default_image.png";
        }
    }

    private async Task PrepareChartData()
    {
        chartDataList.Clear();

        if (bigData != null)
        {
            DateTime startDate = DateTime.Parse(StartTime);
            DateTime endDate = DateTime.Parse(endTime);
            int totalIntervals = (int)(endDate - startDate).TotalSeconds / 900;
            List<DateTime> xValues = new List<DateTime>();
            for (int i = 0; i < totalIntervals; i++)
            {
                DateTime currentDate = startDate.AddSeconds(i * 900);
                xValues.Add(currentDate);
            }

            foreach (var record in bigData)
            {
                if (record.name.Equals(asset.name, StringComparison.OrdinalIgnoreCase))
                {
                    foreach (var recorded in record.recorded)
                    {
                        List<double> yValues = new List<double>();
                        if (recorded.values != null)
                        {
                            foreach (var value in recorded.values)
                            {
                                yValues.Add(value);
                            }
                            unit = recorded.unit;

                            List<object> xValuesObjects = xValues.Select(x => (object)x).ToList();
                            var scatter = new Scatter
                            {
                                Name = recorded.name,
                                Mode = Plotly.Blazor.Traces.ScatterLib.ModeFlag.Lines,
                                X = xValuesObjects,
                                Y = yValues.Cast<object>().ToList()
                            };

                            var layout = new Plotly.Blazor.Layout
                            {
                                Title = new Plotly.Blazor.LayoutLib.Title
                                {
                                    Text = recorded.name
                                },
                                XAxis = new List<Plotly.Blazor.LayoutLib.XAxis>
                                {
                                    new Plotly.Blazor.LayoutLib.XAxis
                                    {
                                        Title = new Plotly.Blazor.LayoutLib.XAxisLib.Title { Text = "Datum" }
                                    }
                                },
                                YAxis = new List<Plotly.Blazor.LayoutLib.YAxis>
                                {
                                    new Plotly.Blazor.LayoutLib.YAxis
                                    {
                                        Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title { Text = unit }
                                    }
                                }
                            };

                            chartDataList.Add(new ChartData
                            {
                                Data = new List<ITrace> { scatter },
                                Layout = layout,
                                Config = new Plotly.Blazor.Config()
                            });
                        }
                    }
                }
            }
        }
    }

    public async void DataNotFound()
    {
        await Task.Delay(5000);
        noData = "NO data available";
        StateHasChanged();
    }

    private string ConvertJSONToCSV()
    {
        StringBuilder csv = new StringBuilder();
        int y = 900;
        csv.AppendLine("DeltaT(sec), Value");
        foreach (var sim in bigData)
        {
            foreach (var recorded in sim.recorded)
            {
                foreach (var values in recorded.values)
                {
                    csv.AppendLine($"{y}, {values}");
                }
            }
            y += 900;
        }
        return csv.ToString();
    }

    private async Task DownloadCSV()
    {
        string csvData = ConvertJSONToCSV();
        string fileName = "_data.csv";
        await JSRuntime.InvokeVoidAsync("downloadFile", "data:text/csv;charset=utf-8,", fileName, csvData);
    }

    private async Task GetData()
    {
        if (SimulationDataService.IsLoading)
            return;

        bigData = await SimulationDataService.GetSimulationDataAsync();
        if (bigData != null)
        {
            StartTime = "2023-01-01T00:00:00";
            endTime = "2023-01-02T00:00:00";
            await PrepareChartData();
            Istrue = true;
            @* DecodedHtml = SimulationDataService.DecodeBase64(responseObj.result_table_base64); *@
            StateHasChanged();
        }
    }

    public void OpenPopup(Propertyy property)
    {
        this.editedProperty = property;
        showPopup = true;
        editedPropertyName = editedProperty.name;
        PropertyValue = editedProperty.value.ToString();
        editedProperties.Add(property);
    }

    public void UpdatePropertyValue(ChangeEventArgs e)
    {
        PropertyValue = e.Value.ToString();
    }

    public async void ClosePopup()
    {
        showPopup = false;
    }

    async void SaveChanges()
    {
        EditState = true;
        if (editedProperty != null)
        {
            editedProperty.value = int.Parse(PropertyValue);
        }

        ClosePopup();
    }


    public async void RunUpdated()
    {
        if (editedProperty != null)
        {
            var payload = new
            {
                runner_update = new
                {
                    start = "2023-01-01T00:00:00",
                    end = "2023-01-02T00:00:00",
                    _clazz = "SimulationConfigJson"
                },
                assets_update = new[]
                {
                    new
                    {
                        name = "Batterij",
                        desc = "Batterij",
                        icon_type = "OTHER",
                        properties = editedProperties,
                        inputs = new object[] { },
                        outputs = new object[] { },
                        _clazz = "AssetJson"
                    }
                },
                _clazz = "RunSimulationEndpointRequest"
            };

            this.endTime = payload.runner_update.end;
            this.StartTime = payload.runner_update.start;

            var upirl = "http://3.72.197.240:5001/run_simulation";
            var token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiY29fbWFrZXIifQ.NQYYS882LhzIyx7CrynwbRub8cf-6ic7KvGwyk77WC8";
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var responseMessage = await httpClient.PostAsJsonAsync(upirl, payload);

            if (responseMessage != null)
            {
                var json = await responseMessage.Content.ReadAsStringAsync();
                var responseObj = Newtonsoft.Json.JsonConvert.DeserializeObject<RunSimulationEndpointResponse>(json);
                     if (responseObj != null)
                {
                    bigData = responseObj.asset_history;
                }

                await PrepareChartData();
                Istrue = true;
                DecodedHtml = SimulationDataService.DecodeBase64(responseObj.result_table_base64);
                StateHasChanged();
            }
        }
    }

    public void endSim()
    {
        Istrue = false;
        EditState = false;
        StateHasChanged();
    }

    public class ChartData
    {
        public Plotly.Blazor.Config Config { get; set; }
        public Plotly.Blazor.Layout Layout { get; set; }
        public IList<ITrace> Data { get; set; }
    }
}
