@page "/Assets"
@inject AssetStateService AssetStateService
@rendermode InteractiveServer
@inject NavigationManager NavigationManager


<input  type="text" class="form-control search-bar" placeholder="Search assets..." @bind="search" />
<h1> Assets</h1>
<p>Total assets: @root.installation.assets.Count()</p>
 
<table class="table">
    <thead>
        <tr>
            <th>Asset Name</th>
            <th>Asset Type</th>
            <th>Status</th>
            <th>View More</th>
            
        </tr>
    </thead>
    <tbody>
    @foreach (var asset in FilteredPagedAssets)
    {
        <tr>
            <td>@asset.Name</td>
            <td>@asset.Desc</td>
            <td>                
                <span style="color:green">&#x2714;</span> <!-- Check mark -->
            </td>
             <td>
                <button @onclick="() => SelectAsset(asset.Name)">Select</button>
            </td>
        </tr>
    }
    </tbody>
</table>


 @code {
    
    
    private string json2;
    private Root root;

    

 
   
    [Parameter]
    public Asset selectedAsset { get; set; }

    [Parameter]
    public string test { get; set; }

    protected override void OnInitialized()
    {
        json2 = System.IO.File.ReadAllText("wwwroot/Simulatie.json");

        root = Newtonsoft.Json.JsonConvert.DeserializeObject<Root>(json2);
        
            
    }


    public void SelectAsset(string assetName)
    {
        AssetStateService.SelectedAsset=root.installation.assets.FirstOrDefault(a => a.Name == assetName);
        selectedAsset = root.installation.assets.FirstOrDefault(a => a.Name == assetName);
        AssetStateService.SelectedAsset = selectedAsset;
        NavigationManager.NavigateTo("/assetDetails");
    }

    public void setAsset(){
        
    }

    public string search {get;set;}

    async Task Searching(){
    
    }

    private IEnumerable<Asset> FilteredPagedAssets => 
        root.installation.assets
            .Where(asset => string.IsNullOrEmpty(search) || asset.Name.Contains(search, StringComparison.OrdinalIgnoreCase));


   
   
   }

  



 
