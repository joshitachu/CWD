@page "/Assets"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject AssetService AssetService
@inject AssetDataService AssetDataService

<input type="text" class="form-control search-bar" placeholder="Search assets..." @bind="search" />
<h1>Assets</h1>
@if (assetJson != null)
{
    <p>Total assets: @assetJson.Count()</p>
}

<table class="table">
    <thead>
        <tr>
            <th>Asset Name</th>
            <th>Asset Type</th>
            <th>Status</th>
            <th>View More</th>
        </tr>
    </thead>
    <tbody>
        @if (assetJson != null)
        {
            @foreach (var asset in FilteredPagedAssets)
            {
                <tr>
                    <td>@asset.name</td>
                    <td>@asset.desc</td>
                    <td>
                        <span style="color:green">&#x2714;</span> <!-- Check mark -->
                    </td>
                    <td>
                        <button @onclick="() => SelectedAsset(asset.name)">Select</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <div class="loading-spinner-container">
                <div class="loading-spinner">
                    <div class="spinner"></div>
                </div>
            </div>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public Roott selectedAssett { get; set; }

    public List<Roott> assetJson;

    [Parameter]
    public string test { get; set; }

    protected override async Task OnInitializedAsync()
    {
        
        assetJson = await AssetDataService.GetAssetsAsync();
    }

    public void SelectedAsset(string assetName)
    {
        AssetService.SelectedAsset = assetJson.FirstOrDefault(a => a.name == assetName);
        selectedAssett = assetJson.FirstOrDefault(a => a.name == assetName);
        AssetService.SelectedAsset = selectedAssett;
        NavigationManager.NavigateTo("/assetDetails");
    }

    public string search { get; set; }

    public IEnumerable<Roott> FilteredPagedAssets =>
        assetJson?.Where(root => string.IsNullOrEmpty(search) || root.name.Contains(search, StringComparison.OrdinalIgnoreCase)) ?? Enumerable.Empty<Roott>();
}
