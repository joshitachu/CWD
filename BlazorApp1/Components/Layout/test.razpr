@if (bigData != null)
{
    foreach (var record in bigData)
    {
        foreach (var property in record.properties)
        {
            <h3>@property.name</h3>
            <PlotlyChart @ref="chart" @bind-Config="config" @bind-Layout="layout" @bind-Data="GetChartData(record.name, property.name)" />
        }
    }
}

@code {
    private IList<ITrace> GetChartData(string recordName, string propertyName)
    {
        var dataForProperty = new List<ITrace>();
        var record = bigData.FirstOrDefault(r => r.name.Equals(recordName));
        if (record != null)
        {
            var property = record.properties.FirstOrDefault(p => p.name.Equals(propertyName));
            if (property != null)
            {
                var xValues = GetXValues();
                var scatter = new Scatter
                {
                    Name = propertyName,
                    Mode = Plotly.Blazor.Traces.ScatterLib.ModeFlag.Lines,
                    X = xValues,
                    Y = property.values.Cast<object>().ToList()
                };

                var layout = new Plotly.Blazor.Layout
                {
                    XAxis = new List<Plotly.Blazor.LayoutLib.XAxis>
                    {
                        new Plotly.Blazor.LayoutLib.XAxis
                        {
                            Title = new Plotly.Blazor.LayoutLib.XAxisLib.Title { Text = "Datum" }
                        }
                    },
                    YAxis = new List<Plotly.Blazor.LayoutLib.YAxis>
                    {
                        new Plotly.Blazor.LayoutLib.YAxis
                        {
                            Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title { Text = property.unit }
                        }
                    }
                };

                dataForProperty.Add(scatter);
            }
        }
        return dataForProperty;
    }

    private List<object> GetXValues()
    {
        DateTime startDate = DateTime.Parse(StartTime);
        DateTime endDate = DateTime.Parse(endTime);
        int totalIntervals = (int)(endDate - startDate).TotalSeconds / 900;
        var xValues = new List<object>();
        for (int i = 0; i < totalIntervals; i++)
        {
            DateTime currentDate = startDate.AddSeconds(i * 900);
            xValues.Add(currentDate);
        }
        return xValues;
    }
}
